mp.messaging.incoming.unfiltered-incoming.topic=unfiltered-incoming
mp.messaging.incoming.unfiltered-incoming.connector=smallrye-kafka
mp.messaging.incoming.unfiltered-incoming.value.serializer=org.apache.kafka.common.serialization.StringSerializer

mp.messaging.outgoing.filtered-outgoing.topic=filtered-outgoing
mp.messaging.outgoing.filtered-outgoing.connector=smallrye-kafka
mp.messaging.outgoing.filtered-outgoing.value.serializer=org.apache.kafka.common.serialization.StringSerializer

filter.criteria={"transportOrder.receiver.code":["MU807747","MU807798","MU807729","MU807768","MU807732"],"billingGroup":["BAA","BAM","GVA","GVM","LBG","LNG","SBG","SNG"]}

# with just @test, Kstreams fails to start:
# Exception in thread "pool-7-thread-1" java.lang.IllegalArgumentException: Missing list of topics
#	at io.quarkus.kafka.streams.runtime.KafkaStreamsRuntimeConfig.lambda$getTrimmedTopics$0(KafkaStreamsRuntimeConfig.java:106)
#	at java.base/java.util.Optional.orElseThrow(Optional.java:403)
#	at io.quarkus.kafka.streams.runtime.KafkaStreamsRuntimeConfig.getTrimmedTopics(KafkaStreamsRuntimeConfig.java:106)
#	at io.quarkus.kafka.streams.runtime.KafkaStreamsProducer.lambda$initializeKafkaStreams$0(KafkaStreamsProducer.java:174)
# @test.quarkus.kafka-streams.topics=unfiltered-source,filtered-target
quarkus.kafka-streams.topics=unfiltered-source,filtered-target
quarkus.kafka-streams.processing-guarantee=exactly_once_v2
# don't wait for topics
# quarkus.kafka-streams.topics-timeout=0

